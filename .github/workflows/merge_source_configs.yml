name: Merge Source Configs and Create Release

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed

jobs:
  merge_yaml:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Merge Source Configs
        run: python merge_yaml.py
        working-directory: ${{ github.workspace }}

      - name: Get Latest Release
        id: get_latest_release
        run: |
          release=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -s "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          echo "::set-output name=tag::$(echo $release | jq -r '.tag_name')"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump Version
        id: bump_version
        run: |
          latest_tag=$TAG
          major=$(echo $latest_tag | cut -d. -f1)
          minor=$(echo $latest_tag | cut -d. -f2)
          patch=$(echo $latest_tag | cut -d. -f3)
          new_version="$major.$minor.$((patch+1))"
          echo "::set-output name=version::$new_version"
        env:
          TAG: ${{ steps.get_latest_release.outputs.tag }}

      - name: Create Release
        if: (github.event.pull_request.merged == true) || (github.event.ref == 'refs/heads/main')
        run: |
          release_version=$VERSION
          release_name="Release $release_version"
          release_body="This is an automated release for version $release_version."
          release_url="https://api.github.com/repos/${GITHUB_REPOSITORY}/releases"
          
          # Create a release using the GitHub API
          response=$(curl -X POST "$release_url" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{
              "tag_name": "'"$release_version"'",
              "name": "'"$release_name"'",
              "body": "'"$release_body"'"
            }')
          
          # Upload the merged YAML file as an asset
          upload_url=$(echo "$response" | jq -r .upload_url)
          upload_url=${upload_url/\{?name,label\}/}
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary "@registry.yml" \
            "$upload_url?name=registry.yml"
        env:
          VERSION: ${{ steps.bump_version.outputs.version }}
